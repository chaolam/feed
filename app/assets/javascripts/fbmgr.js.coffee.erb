@FBMgr = 
  ChannelUri: '/fb_channel'
  fbinit_deferred: $.Deferred()
  fblogged_in: $.Deferred()
  permissions_deferred: $.Deferred()
  init: (appId)->
    @appId = appId
    @channelUrl = window.location.protocol + '//' + location.host +
      (if location.port then ":" + location.port else '') + @ChannelUri
    window.fbAsyncInit = $.proxy(@fbInit_cb, @)
    ((d)->
      id = 'facebook-jssdk'
      ref = d.getElementsByTagName('script')[0]
      if !d.getElementById(id)
        js = d.createElement('script')
        js.id = id
        js.async = true
        js.src = '//connect.facebook.net/en_US/all.js'
        ref.parentNode.insertBefore(js, ref)
    )(document)
  fbInit_cb: ->
    FB.init({appId:@appId, status:true, cookie:true, xfbml:true, channelUrl:@channelUrl});
    @fbinit_deferred.resolve()
    FB.getLoginStatus($.proxy(@handleFBSession, @))
  handleFBSession: (r)->
    if r.authResponse
      @fblogged_in.resolve()
      @requestPermissions() unless @permissions
  requestPermissions: (action)->
    FB.api('/me/permissions', (r)=>
      if r.data && r.data[0]
        @permissions = r.data && r.data[0]
        @permissions_deferred.resolve()
        action() if action
    )
  hasPermission: (perm)->
    @permissions[perm]
  noMorePermission: (perm)->
    @permissions[perm] = 0
  withPermissionDo: (perm, action) ->
    $.when(@permissions_deferred).then(=>
      if @hasPermission(perm)
        action()
      else
        if perm == 'read_stream'
          # read_stream permission results in pop_up blocking, so use server side
          oauth_url = 'https://www.facebook.com/dialog/oauth/'
          oauth_url += '?client_id=' + @appId
          oauth_url += '&redirect_uri=' + encodeURIComponent(location.href)
          oauth_url += '&scope=read_stream'
          window.top.location = oauth_url
        else
          FB.login(=>
            @requestPermissions(action)
          , {scope:perm})
    )
        
      
